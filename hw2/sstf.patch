From e53d9a5ec64f41c52c1ec80f697ea72d874b6419 Mon Sep 17 00:00:00 2001
From: Thomas Olson <olsont@os-class.engr.oregonstate.edu>
Date: Sun, 7 May 2017 22:41:49 -0700
Subject: [PATCH 1/2] Added C-LOOK scheduler

---
 block/sstf-iosched.c | 149 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 149 insertions(+)
 create mode 100644 block/sstf-iosched.c

diff --git a/block/sstf-iosched.c b/block/sstf-iosched.c
new file mode 100644
index 0000000..ba8bf55
--- /dev/null
+++ b/block/sstf-iosched.c
@@ -0,0 +1,149 @@
+/*
+ * elevator noop
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue)) {
+		struct request *rq;
+		rq = list_entry(nd->queue.next, struct request, queuelist);
+		printk("Dispatching %ul\n", blk_rq_pos(rq));
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+
+	struct sstf_data *nd = q->elevator->elevator_data;
+	struct request *head = list_entry(nd->queue.next, struct request, queuelist);
+	struct request *cur = NULL;
+	struct list_head *pos = NULL;
+
+
+	list_for_each (pos, &nd->queue){
+		cur = list_entry(pos, struct request, queuelist);
+
+		//If the request is after the head request in the queue,
+		//the iteration is 
+		if (blk_rq_pos(rq) <= blk_rq_pos(head)
+		    && (blk_rq_pos(rq) >= blk_rq_pos(cur)
+			||  blk_rq_pos(head) < blk_rq_pos(cur))){
+			break;
+		}
+
+		    
+		if (blk_rq_pos(rq) > blk_rq_pos(head)
+		    && blk_rq_pos(head) < blk_rq_pos(cur)
+		    && blk_rq_pos(rq) >= blk_rq_pos(cur)){
+			break;
+		}	
+	}
+
+	list_add_tail(&rq->queuelist, pos);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("No-op IO scheduler");
-- 
1.7.12.4


From af655f20fa0054b83634cc985b141401e71ee2d8 Mon Sep 17 00:00:00 2001
From: Thomas Olson <olsont@os-class.engr.oregonstate.edu>
Date: Sun, 7 May 2017 22:42:24 -0700
Subject: [PATCH 2/2] Updated config and make to include CLOOK

---
 block/Kconfig.iosched | 12 +++++++++++-
 block/Makefile        |  1 +
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 421bef9..ad2a338 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -12,6 +12,12 @@ config IOSCHED_NOOP
 	  that do their own scheduling and require only minimal assistance from
 	  the kernel.
 
+config IOSCHED_SSTF
+        tristate
+	default y
+	---help---
+	  Implementation of the C-LOOK I/O scheduler
+
 config IOSCHED_DEADLINE
 	tristate "Deadline I/O scheduler"
 	default y
@@ -41,11 +47,14 @@ config CFQ_GROUP_IOSCHED
 
 choice
 	prompt "Default I/O scheduler"
-	default DEFAULT_CFQ
+	default DEFAULT_SSTF
 	help
 	  Select the I/O scheduler which will be used by default for all
 	  block devices.
 
+	config DEFAULT_SSTF
+	        bool "SSTF" if IOSCHED_SSTF=y
+
 	config DEFAULT_DEADLINE
 		bool "Deadline" if IOSCHED_DEADLINE=y
 
@@ -62,6 +71,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index 20645e8..4b323fe 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
-- 
1.7.12.4

